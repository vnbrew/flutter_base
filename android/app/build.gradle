plugins {
    id "com.android.application"
    id "kotlin-android"
    id "dev.flutter.flutter-gradle-plugin"
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('./app/src/production/prod.properties')
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

android {
    compileSdk 34
    ndkVersion flutter.ndkVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    dependenciesInfo {
        includeInApk = false
        includeInBundle = true
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8
    }

    defaultConfig {
        applicationId "com.example.flutter_base"
        minSdkVersion 22
        targetSdkVersion 34
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        ndk {
            debugSymbolLevel 'FULL'
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.debug
        }
    }
    
    namespace "com.example.flutter_base"

    lint {
        abortOnError false
        disable 'InvalidPackage'
    }

    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            def project = "flutter_app"
            def SEP = "_"
            def buildType = variant.buildType.name
            def version = variant.versionName
            def versionCode = variant.versionCode
            def date = new Date();
            def formattedDate = date.format('ddMMyy_HH')

            def newApkName = project + SEP + buildType + SEP + version + SEP + versionCode + SEP + formattedDate + ".apk"

            outputFileName = new File(newApkName)
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:1.9.20"
}
